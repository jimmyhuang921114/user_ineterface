#!/usr/bin/env python3 """  -  Hospital Medicine Management System - Enhanced Version  """ from fastapi import FastAPI, HTTPException from fastapi.middleware.cors import CORSMiddleware from fastapi.staticfiles import StaticFiles from fastapi.responses import JSONResponse, FileResponse from pydantic import BaseModel from pathlib import Path from datetime import datetime from typing import List, Optional, Dict, Any import uvicorn import json # Pydantic  class MedicineBasic(BaseModel): name: str amount: int usage_days: int position: str class MedicineDetailed(BaseModel): : Dict[str, str] : Dict[str, str] : Dict[str, str] : Dict[str, str] : str : str : str : str : str : str class Patient(BaseModel): name: str age: int gender: str phone: str address: str medical_history: Optional[str] = "" current_medications: Optional[List[str]] = [] allergies: Optional[str] = "" class PatientRecord(BaseModel): patient_id: int visit_date: str diagnosis: str prescribed_medicines: List[str] dosage_instructions: str doctor_notes: str #  FastAPI  app = FastAPI( title=" - ", description="Hospital Medicine Management System - Enhanced", version="2.0.0" ) # CORS  app.add_middleware( CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"], ) #  base_dir = Path(__file__).resolve().parent static_dir = base_dir / "static" #  try: if (static_dir / "css").exists(): app.mount("/css", StaticFiles(directory=static_dir / "css"), name="css") if (static_dir / "js").exists(): app.mount("/js", StaticFiles(directory=static_dir / "js"), name="js") if (static_dir / "html").exists(): app.mount("/html", StaticFiles(directory=static_dir / "html"), name="html") except Exception as e: print(f": : {e}") #  () medicines_db = [] detailed_medicines_db = {} patients_db = [] patient_records_db = [] next_medicine_id = 1 next_patient_id = 1 next_record_id = 1 #  @app.get("/") async def root(): return { "message": " - ", "status": "", "version": "2.0.0", "statistics": { "medicines": len(medicines_db), "detailed_medicines": len(detailed_medicines_db), "patients": len(patients_db), "records": len(patient_records_db) }, "new_features": [ "", "", "", "JSON" ] } #  @app.get("/api/test") async def test_api(): return { "status": "success", "message": "API", "time": datetime.now().isoformat(), "system_stats": { "medicines": len(medicines_db), "patients": len(patients_db), "records": len(patient_records_db) } } # ===  API === @app.get("/api/medicine/") async def get_all_medicines(): """""" return medicines_db @app.post("/api/medicine/") async def create_medicine(medicine: MedicineBasic): """""" global next_medicine_id new_medicine = { "id": next_medicine_id, "name": medicine.name, "amount": medicine.amount, "usage_days": medicine.usage_days, "position": medicine.position, "create_time": datetime.now().isoformat() } medicines_db.append(new_medicine) next_medicine_id += 1 return new_medicine @app.put("/api/medicine/{medicine_id}") async def update_medicine(medicine_id: int, medicine: MedicineBasic): """""" for i, existing_medicine in enumerate(medicines_db): if existing_medicine["id"] == medicine_id: medicines_db[i].update({ "name": medicine.name, "amount": medicine.amount, "usage_days": medicine.usage_days, "position": medicine.position, "updated_time": datetime.now().isoformat() }) return medicines_db[i] raise HTTPException(status_code=404, detail="") @app.delete("/api/medicine/{medicine_id}") async def delete_medicine(medicine_id: int): """""" global medicines_db original_length = len(medicines_db) medicines_db = [m for m in medicines_db if m["id"] != medicine_id] if len(medicines_db) == original_length: raise HTTPException(status_code=404, detail="") return {"success": True, "message": "", "id": medicine_id} # ===  API === @app.post("/api/medicine/detailed/") async def create_detailed_medicine(medicine_name: str, medicine_data: MedicineDetailed): """""" detailed_medicines_db[medicine_name] = { **medicine_data.dict(), "created_time": datetime.now().isoformat() } return {"success": True, "message": f": {medicine_name}"} @app.get("/api/medicine/detailed/{medicine_name}") async def get_detailed_medicine(medicine_name: str): """""" if medicine_name not in detailed_medicines_db: raise HTTPException(status_code=404, detail="") return detailed_medicines_db[medicine_name] @app.get("/api/medicine/detailed/") async def get_all_detailed_medicines(): """""" return detailed_medicines_db @app.get("/api/medicine/search/detailed/{query}") async def search_detailed_medicines(query: str): """""" results = {} query_lower = query.lower() for name, data in detailed_medicines_db.items(): if (query_lower in name.lower() or query_lower in data.get("", {}).get("", "").lower() or query_lower in data.get("", {}).get("", "").lower()): results[name] = data if not results: raise HTTPException(status_code=404, detail="") return results @app.get("/api/medicine/search/code/{code}") async def search_medicine_by_code(code: str): """""" results = {} code_upper = code.upper() for name, data in detailed_medicines_db.items(): packaging_codes = data.get("", {}) #  for code_key, code_value in packaging_codes.items(): if code_upper in code_value.upper(): results[name] = { **data, "matched_code": { "type": code_key, "value": code_value, "search_term": code } } break if not results: raise HTTPException(status_code=404, detail=f" '{code}' ") return results @app.get("/api/medicine/search/exact-code/{code}") async def search_medicine_by_exact_code(code: str): """""" results = {} for name, data in detailed_medicines_db.items(): packaging_codes = data.get("", {}) #  for code_key, code_value in packaging_codes.items(): if code == code_value: results[name] = { **data, "matched_code": { "type": code_key, "value": code_value, "match_type": "exact" } } break if not results: raise HTTPException(status_code=404, detail=f" '{code}' ") return results @app.get("/api/medicine/codes/") async def get_all_medicine_codes(): """""" all_codes = {} for name, data in detailed_medicines_db.items(): packaging_codes = data.get("", {}) if packaging_codes: all_codes[name] = { "medicine_name": data.get("", {}).get("", name), "manufacturer": data.get("", {}).get("", ""), "codes": packaging_codes } return { "total_medicines": len(all_codes), "medicines_with_codes": all_codes } # ===  API === @app.get("/api/patients/") async def get_all_patients(): """""" return patients_db @app.post("/api/patients/") async def create_patient(patient: Patient): """""" global next_patient_id new_patient = { "id": next_patient_id, **patient.dict(), "created_time": datetime.now().isoformat() } patients_db.append(new_patient) next_patient_id += 1 return new_patient @app.get("/api/patients/{patient_id}") async def get_patient(patient_id: int): """""" for patient in patients_db: if patient["id"] == patient_id: return patient raise HTTPException(status_code=404, detail="") @app.put("/api/patients/{patient_id}") async def update_patient(patient_id: int, patient_update: Patient): """""" for i, patient in enumerate(patients_db): if patient["id"] == patient_id: patients_db[i].update({ **patient_update.dict(), "updated_time": datetime.now().isoformat() }) return patients_db[i] raise HTTPException(status_code=404, detail="") @app.delete("/api/patients/{patient_id}") async def delete_patient(patient_id: int): """""" global patients_db, patient_records_db #  original_length = len(patients_db) patients_db = [p for p in patients_db if p["id"] != patient_id] if len(patients_db) == original_length: raise HTTPException(status_code=404, detail="") #  patient_records_db = [r for r in patient_records_db if r["patient_id"] != patient_id] return {"success": True, "message": "", "patient_id": patient_id} # ===  API === @app.get("/api/records/") async def get_all_records(): """""" return patient_records_db @app.post("/api/records/") async def create_record(record: PatientRecord): """""" global next_record_id new_record = { "id": next_record_id, **record.dict(), "created_time": datetime.now().isoformat() } patient_records_db.append(new_record) next_record_id += 1 return new_record @app.get("/api/records/patient/{patient_id}") async def get_patient_records(patient_id: int): """""" records = [r for r in patient_records_db if r["patient_id"] == patient_id] return records @app.delete("/api/records/{record_id}") async def delete_record(record_id: int): """""" global patient_records_db original_length = len(patient_records_db) patient_records_db = [r for r in patient_records_db if r["id"] != record_id] if len(patient_records_db) == original_length: raise HTTPException(status_code=404, detail="") return {"success": True, "message": "", "record_id": record_id} # ===  API === @app.get("/api/medicine/integrated/{medicine_name}") async def get_integrated_medicine_info(medicine_name: str): """ ( + )""" result = { "medicine_name": medicine_name, "basic_info": None, "detailed_info": None, "status": "not_found" } #  for medicine in medicines_db: if medicine["name"].lower() == medicine_name.lower(): result["basic_info"] = medicine break #  if medicine_name in detailed_medicines_db: result["detailed_info"] = detailed_medicines_db[medicine_name] #  if result["basic_info"] and result["detailed_info"]: result["status"] = "complete" #  elif result["basic_info"]: result["status"] = "basic_only" #  elif result["detailed_info"]: result["status"] = "detailed_only" #  else: raise HTTPException(status_code=404, detail="") return result @app.get("/api/medicine/integrated/") async def get_all_integrated_medicines(): """""" integrated_medicines = {} #  for medicine in medicines_db: name = medicine["name"] integrated_medicines[name] = { "basic_info": medicine, "detailed_info": detailed_medicines_db.get(name, None), "status": "complete" if name in detailed_medicines_db else "basic_only" } #  for name in detailed_medicines_db: if name not in integrated_medicines: integrated_medicines[name] = { "basic_info": None, "detailed_info": detailed_medicines_db[name], "status": "detailed_only" } return { "total_medicines": len(integrated_medicines), "integrated_medicines": integrated_medicines } # === JSON  === @app.get("/api/export/medicines/basic") async def export_basic_medicines(): """""" export_data = { "export_type": "", "total_count": len(medicines_db), "export_date": datetime.now().isoformat(), "data": medicines_db } return JSONResponse( content=export_data, headers={"Content-Disposition": "attachment; filename=basic_medicines.json"} ) @app.get("/api/export/medicines/detailed") async def export_detailed_medicines(): """""" export_data = { "export_type": "", "total_count": len(detailed_medicines_db), "export_date": datetime.now().isoformat(), "data": detailed_medicines_db } return JSONResponse( content=export_data, headers={"Content-Disposition": "attachment; filename=detailed_medicines.json"} ) @app.get("/api/export/patients") async def export_patients(): """""" export_data = { "export_type": "", "total_count": len(patients_db), "export_date": datetime.now().isoformat(), "data": patients_db } return JSONResponse( content=export_data, headers={"Content-Disposition": "attachment; filename=patients.json"} ) @app.get("/api/export/records") async def export_records(): """""" export_data = { "export_type": "", "total_count": len(patient_records_db), "export_date": datetime.now().isoformat(), "data": patient_records_db } return JSONResponse( content=export_data, headers={"Content-Disposition": "attachment; filename=patient_records.json"} ) @app.get("/api/export/medicines/integrated") async def export_integrated_medicines(): """ ( + )""" integrated_data = {} #  all_integrated = await get_all_integrated_medicines() for name, data in all_integrated["integrated_medicines"].items(): medicine_export = { "": name, "": "" if data["basic_info"] else "", "": "" if data["detailed_info"] else "", "": data["status"] } #  if data["basic_info"]: medicine_export[""] = { "ID": data["basic_info"]["id"], "": data["basic_info"]["amount"], "": data["basic_info"]["position"], "": data["basic_info"]["usage_days"], "": data["basic_info"]["create_time"] } #  if data["detailed_info"]: medicine_export[""] = data["detailed_info"] integrated_data[name] = medicine_export export_data = { "export_type": "", "total_count": len(integrated_data), "export_date": datetime.now().isoformat(), "description": "", "data": integrated_data } return JSONResponse( content=export_data, headers={"Content-Disposition": "attachment; filename=integrated_medicines.json"} ) @app.get("/api/export/complete") async def export_complete_system(): """""" export_data = { "export_type": "", "export_date": datetime.now().isoformat(), "system_version": "2.0.0", "statistics": { "basic_medicines": len(medicines_db), "detailed_medicines": len(detailed_medicines_db), "patients": len(patients_db), "records": len(patient_records_db) }, "data": { "basic_medicines": medicines_db, "detailed_medicines": detailed_medicines_db, "patients": patients_db, "patient_records": patient_records_db } } return JSONResponse( content=export_data, headers={"Content-Disposition": "attachment; filename=complete_system_export.json"} ) # ===  === @app.get("/Medicine.html") async def serve_medicine_page(): html_file = static_dir / "html" / "Medicine.html" if html_file.exists(): return FileResponse(html_file, media_type='text/html') else: return JSONResponse(content={"error": "Medicine.html not found"}, status_code=404) @app.get("/Patients.html") async def serve_patients_page(): html_file = static_dir / "html" / "Patients.html" if html_file.exists(): return FileResponse(html_file, media_type='text/html') else: return JSONResponse(content={"error": "Patients.html not found"}, status_code=404) @app.get("/Records.html") async def serve_records_page(): html_file = static_dir / "html" / "Records.html" if html_file.exists(): return FileResponse(html_file, media_type='text/html') else: return JSONResponse(content={"error": "Records.html not found"}, status_code=404) #  def init_test_data(): """""" global medicines_db, detailed_medicines_db, patients_db, patient_records_db global next_medicine_id, next_patient_id, next_record_id #  test_medicines = [ { "id": 1, "name": "", "amount": 100, "usage_days": 30, "position": "A1-01", "create_time": datetime.now().isoformat() }, { "id": 2, "name": "", "amount": 50, "usage_days": 60, "position": "A1-02", "create_time": datetime.now().isoformat() } ] medicines_db.extend(test_medicines) next_medicine_id = 3 #  detailed_medicines_db[""] = { "": { "": "(Propranolol)", "": "", "": "10" }, "": { "": "", "": "" }, "": { "1": "202801", "2": "TP071014", "3": "009102" }, "": { "": "", "": "Propranolol HCl" }, "": "", "": "--AV", "": "", "": "1. 2. 3.  COPD 4. 5.  Clonidine", "": "C D ", "": "", "created_time": datetime.now().isoformat() } #  detailed_medicines_db[""] = { "": { "": " (Antipsychotics)", "": "5 ", "": " (Oral use)", "": "1 special pill" }, "": { "": " ", "": "" }, "": { "": "2027/08/02" }, "": "", "": "", "": "", "created_time": datetime.now().isoformat() } #  test_patients = [ { "id": 1, "name": "", "age": 45, "gender": "", "phone": "0912345678", "address": "", "medical_history": "", "current_medications": [""], "allergies": "", "created_time": datetime.now().isoformat() } ] patients_db.extend(test_patients) next_patient_id = 2 #  test_records = [ { "id": 1, "patient_id": 1, "visit_date": datetime.now().isoformat(), "diagnosis": "", "prescribed_medicines": [" 10mg"], "dosage_instructions": "", "doctor_notes": "", "created_time": datetime.now().isoformat() } ] patient_records_db.extend(test_records) next_record_id = 2 if __name__ == "__main__": print(" - ") print("=" * 70) print("...") print(":  +  + ") print(": http://localhost:8000") print("API: http://localhost:8000/docs") print(": http://localhost:8000/Medicine.html") print(": http://localhost:8000/Patients.html") print(": http://localhost:8000/Records.html") print("API: http://localhost:8000/api/test") print(": http://localhost:8000/api/export/complete") print("=" * 70) #  init_test_data() print(f":") print(f" : {len(medicines_db)} ") print(f" : {len(detailed_medicines_db)} ") print(f" : {len(patients_db)} ") print(f" : {len(patient_records_db)} ") try: uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info") except KeyboardInterrupt: print("\n") except Exception as e: print(f": : {e}") exit(1)